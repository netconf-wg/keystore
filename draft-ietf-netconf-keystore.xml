<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc category="std"
     ipr="trust200902"
     docName="draft-ietf-netconf-keystore-latest" >
    <front>
      <title>A YANG Data Model for a Keystore</title>
      <author initials="K." surname="Watsen" fullname="Kent Watsen">
        <organization>Watsen Networks</organization>
        <address>
          <email>kent+ietf@watsen.net</email>
        </address>
      </author>
      <date/>
      <area>Operations</area>
      <workgroup>NETCONF Working Group</workgroup>
      <abstract>
        <t>This document defines a YANG 1.1 module called "ietf-keystore"
          that enables centralized configuration of both symmetric and
          asymmetric keys.  The secret value for both key types may be
          encrypted.  Asymmetric keys may be associated with certificates.
          Notifications are sent when certificates are about to expire.</t>
      </abstract>
      <note title="Editorial Note (To be removed by RFC Editor)">
        <t>This draft contains placeholder values that need to be replaced
          with finalized values at the time of publication.  This note summarizes
          all of the substitutions that are needed.  No other RFC Editor 
          instructions are specified elsewhere in this document.</t>
        <t>Artwork in this document contains shorthand references to drafts in
          progress.  Please apply the following replacements:
          <list style="symbols">
            <t><spanx style="verb">AAAA</spanx> --&gt; the assigned RFC value for draft-ietf-netconf-crypto-types</t>
            <t><spanx style="verb">CCCC</spanx> --&gt; the assigned RFC value for this draft</t>
          </list>
        </t>
        <t>Artwork in this document contains placeholder values for the date of publication of this
          draft.  Please apply the following replacement:
          <list  style="symbols">
            <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
          </list>
        </t>
        <t>The following Appendix section is to be removed prior to publication:
          <list  style="symbols">
            <t>Appendix A.  Change Log</t>
          </list>
        </t>
      </note>
INSERT_TEXT_FROM_FILE(../client-server-overview-snippet.xml,148)
    </front>
    <middle>

      <section title="Introduction">
        <t>This document defines a YANG 1.1 <xref target="RFC7950"/>  module called "ietf-keystore"
          that enables centralized configuration of both symmetric and
          asymmetric keys.  The secret value for both key types may be
          encrypted.  Asymmetric keys may be associated with certificates.
          Notifications are sent when certificates are about to expire.</t>

        <t>The "ietf-keystore" module defines many "grouping" statements
          intended for use by other modules that may import it.  For instance,
          there are groupings that defined enabling a key to be either configured
          locally (within the defining data model) or be a reference to a key
          in the Keystore.
        </t>

        <t>Special consideration has been given for systems that have cryptographic
          hardware, such as a Trusted Protection Module (TPM).  These systems are
          unique in that the cryptographic hardware hides the secret key values.
          To support such hardware, symmetric keys may have the value "hidden-key"
          and asymmetric keys may have the value "hidden-private-key".  While how
          such keys are created or destroyed is outside the scope of this document,
          the Keystore can contain entries for such keys, enabling them to be
          referenced by other configuration elements.</t>

        <t>This document in compliant with Network Management Datastore Architecture
          (NMDA) <xref target="RFC8342"/>.  For instance, keys and associated
          certificates installed during manufacturing (e.g., for a IDevID 
          <xref target="Std-802.1AR-2009"/> certificate), are expected to appear
          in &lt;operational&gt; (see <xref target="built-ins"/>).</t>

        <t>It is not required that a system has an operating system level
          keystore utility, with or without HSM backing, to implement
          this module.  It is also possible that a system implementing
          the module to possess a multiplicity of operating system level
          keystore utilities and/or a multiplicity of HSMs.</t>

      </section>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
        NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
        "MAY", and "OPTIONAL" in this document are to be interpreted as
        described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
        when, and only when, they appear in all capitals, as shown here.</t>
      </section>

<!--
        <t>For the trusted-certificates list, Trust Anchor Format 
        <xref target="RFC5914"/> was evaluated and deemed inappropriate due
        to this document's need to also support pinning.  That is, pinning
        a client-certificate to support NETCONF over TLS client authentication.</t>
-->

      <section title="The Keystore Model">

        <section title="Tree Diagram">
          <t>This section provides a tree diagrams <xref target="RFC8340"/> for
          the "ietf-keystore" module that presents both the protocol-accessible
          "keystore" as well the all the groupings intended for external usage.</t>
<!--
          <t>This section provides two tree diagrams <xref target="RFC8340"/> for
          the "ietf-keystore" module, the first with used groupings expanded and the
          second with used groupings not expanded.  Both tree diagrams present 
          the protocol-accessible "keystore" as well the all the groupings intended
          for external usage.</t>
-->
          <t><!--The following tree diagram has used groupings expanded:-->
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-keystore-tree.txt)
]]></artwork>
            </figure>
          </t>
<!--
          <t>The following tree diagram does not have the used groupings expanded:
            <figure>
              <artwork><![CDATA[
INSERT_NO_TEXT_FROM_FILE(refs/ietf-keystore-tree-no-expand.txt)
]]></artwork>
            </figure>
          </t>
-->
        </section>
  
        <section title="Example Usage" anchor="examples">

          <t>The examples in this section are encoded using XML, such as might
            be the case when using the NETCONF protocol. Other encodings MAY
            be used, such as JSON when using the RESTCONF protocol.</t>

          <section title="A Keystore Instance" anchor="ks-inst">
            <t>The following example illustrates keys in &lt;running&gt;.
              Please see <xref target="built-ins"/> for an example illustrating
              built-in values in &lt;operational&gt;.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="A Certificate Expiration Notification">
            <t>The following example illustrates a "certificate-expiration"
              notification for a certificate associated with a key configured
              in the keystore.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-notification-ce.xml)
]]></artwork>
              </figure>
            </t>
          </section>

          <section title="The &quot;Local or Keystore&quot; Groupings">
            <t>This section illustrates the various "local-or-truststore" groupings
              defined in the "ietf-keystore" module.</t>
            <t>The following non-normative module is defined in illustrate these
              groupings:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ex-keystore-usage.yang)
]]></artwork>
              </figure>
            </t>
            <t>The tree diagram <xref target="RFC8340"/> for this example
                module follows:</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-usage-tree.txt)
]]></artwork>
              </figure>
            </t>
            <t>The following example provides two equivalent instances of
              each grouping, the first being a reference to a keystore
              and the second being locally-defined.  The instance having
              a reference to a keystore is consistent with the keystore
              defined in <xref target="ks-inst"/>.  The two instances are
              equivalent, as the locally-defined instance example contains
              the same values defined by the keystore instance referenced
              by its sibling example.</t>
            <t>
              <figure>
                <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-usage.xml)
]]></artwork>
              </figure>
            </t>
          </section>
        </section>
  
        <section title="YANG Module" anchor="keystore-yang-module">
<!-- BEFORE MOVING GROUPINGS TO CRYPTO-TYPES
          <t>This YANG module imports modules defined in <xref target="RFC8341"/>,
          <xref target="RFC6991"/>, <xref target="RFC8341"/>,  and
          <xref target="I-D.ietf-netconf-crypto-types"/>.
          This module uses data types defined in <xref target="RFC2986"/>,
          <xref target="RFC5652"/>, <xref target="RFC5915"/>,
          <xref target="RFC6125"/>, <xref target="RFC8017"/>,
          and <xref target="ITU.X690.2015"/>.</t>
-->
          <t>This YANG module has normative references to <xref target="RFC8341"/>
          and <xref target="I-D.ietf-netconf-crypto-types"/>.</t>

          <t>
            <figure>
              <preamble>&lt;CODE BEGINS&gt; file "ietf-keystore@YYYY-MM-DD.yang"</preamble>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ietf-keystore@YYYY-MM-DD.yang)
]]></artwork>
              <postamble>&lt;CODE ENDS&gt;</postamble>
            </figure>
          </t>
        </section>
      </section>

      <section title="Support for Built-in Keys" anchor="built-ins">
        <t>In some implementations, a server may support built-in keys.  Built-in
          built-in keys MAY be set during the manufacturing process or be dynamically
          generated the first time the server is booted or a particular service
          (e.g., SSH) is enabled.</t>
        <t>The key characteristic of the built-in keys is that they are provided
          by the system, as opposed to configuration.  As such, they are present in
          &lt;operational&gt;. The example below illustrates what the truststore in
          &lt;operational&gt; might look like for a server in its factory default
          state.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-default-operational.xml)
]]></artwork>
          </figure>
        </t>
        <t>In order for the built-in keys (and/or their associated built-in
          certificates) to be referenced by configuration, the referenced keys
          MUST first be copied into &lt;running&gt;.  The keys SHOULD be copied
          into &lt;running&gt; using the same "key" values, so that the server
          can bind the references to the built-in entries.</t>
        <t>Built-in "hidden" keys cannot be copied into other parts of the
          configuration because their private parts are hidden, and therefore
          impossible to replicate.  Built-in "encrypted" keys MAY be copied
          into other parts of the configuration so long as they maintain their
          reference to the other built-in key that encrypted them.</t>
        <t>Only the referenced keys need to be copied; that is, the keys
          in &lt;running&gt; MAY be a subset of the built-in keys define in
          &lt;operational&gt;.  No keys may be added or changed (with exception
          to associating additional certificates to a built-in key); that is,
          the keys in &lt;running&gt; MUST be a subset (which includes the
          whole of the set) of the built-in keys define in &lt;operational&gt;.</t>
        <t>A server MUST reject attempts to modify any aspect of built-in keys,
          with exception to associating additional certificates to a built-in key.
          That these keys are "configured" in &lt;running&gt; is an illusion,
          as they are strictly a read-only subset of that which must already
          exist in &lt;operational&gt;.</t>
        <t>The following example illustrates how a single built-in key definition
          from the previous example has been propagated to &lt;running&gt;:</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-default-running.xml)
]]></artwork>
          </figure>
        </t>
        <t>After the above configuration is applied, &lt;operational&gt; should appear
          as follows:</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-default-operational-applied.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Encrypting Keys in Configuration">

        <t>This section describes an approach that enables all the private keys on a
          server to be encrypted, such that traditional backup/restore procedures
          can be used without concern for keys being compromised when in transit.</t>

        <section title="Root Key">
          <t>The cornerstone to this solution is the existence of a "root" key that
            can be used to encrypt all the other keys.  The server MUST be able to
            use this key to decrypt the other keys in the configuration.</t>
          <t>The root key SHOULD be a hidden key, i.e., one whose private data has
            no presence in &lt;running&gt; or &lt;operational&gt; (see "hidden-key"
            and "hidden-private-key" in "ietf-crypto-types"
            <xref target="I-D.ietf-netconf-crypto-types"/>).  If the server
            implementation does not support hidden keys, then the private data part
            of key MUST be protected by access control with access granted only to
            an administrator with special access control rights (e.g., an
            organization's crypto officer).  Given the long lifetime of built-in
            keys (see <xref target="built-ins"/>), built-in keys MUST be hidden.</t>
          <t>A hidden root key MAY be either a symmetric key or an asymmetric key.  If
            the hidden root key is symmetric, then the server MUST provide APIs enabling
            other keys (ideally generated by the server) to be encrypted.  If the
            hidden root key is asymmetric, then the server SHOULD provide APIs enabling
            other keys to be both generated and encrypted by it, but MAY alternatively
            enable administrators with special access control rights to generate and
            encrypt the other keys themselves, using the hidden key's public part.
            For practical reasons, an unhidden root key SHOULD be asymmetric, so that
            its public part can be accessed by other administrators without concern.</t>
        </section>

        <section title="Configuring Encrypting Keys">
          <t>Each time a new key is to be configured, it SHOULD be encrypted by the
            root key.</t>
          <t>In "ietf-crypto-types" <xref target="I-D.ietf-netconf-crypto-types"/>,
            the format for an encrypted symmetric key is described by the
            "encrypted-one-symmetric-key-format" identity, while the format
            for an encrypted asymmetric key is described by the 
            "encrypted-one-asymmetric-key-format" identity</t>
          <t>Ideally, the server implementation provides an API to generate a 
            symmetric or asymmetric key, and encrypt the generated key using
            another key known to the system (e.g., the root key).  Thusly
            administrators can safely call this API to configure new keys.</t>
          <t>In case the server implementation does not provide such an API, then
            the generating and encrypting steps MAY be performed outside the
            server, e.g., by an administrator with special access control rights.</t>
          <t>In either case, the encrypted key can be configured into the Keystore
            using either the "encrypted-key" (for symmetric keys) or the 
            "encrypted-private-key" (for asymmetric keys) nodes.  These two nodes
            contain both the encrypted value as well as a reference to the other
            key in the Keystore that it was encrypted by.</t>
        </section>

        <section title="Migrating Configuration to Another Server">
          <t>In the case a server's root key is used to encrypt other keys,
            migrating the configuration to another server may entail additional
            effort, assuming the second server has a different root key than the
            first server, in order for the second server to decrypt the other
            encrypted keys.</t>
          <t>In some deployments, mechanisms outside the scope of this document
            may be used to migrate the root key from one server to another.
            That said, beware that the ability to do so typically entails having
            access to the first server but, in many RMA scenarios, the first server
            may no longer be operational.</t>
          <t>Another option is to introduce a "shared root" key that acts as
            a portable intermediate root key.  This shared root key would only
            need to be known to an organization's crypto officer.  The shared
            root key SHOULD be encrypted offline by the crypto officer using
            each server's public key, which may be, e.g., in the server's
            IDevID certificate.  The crypto officer can then safely handoff
            the encrypted shared key to other administrators responsible for
            server installations, including migrations.  In order to migrate
            configuration from a first server, an administrator would need to
            make just a single modification to the configuration before loading it
            onto a second server, which is to replace the shared key's Keystore
            entry from the first server (an encrypted key), with the shared key
            encrypted by the second server's root key.  The following diagram
            illustrates this idea:</t>
        <t>
          <figure>
            <artwork><![CDATA[
 +-------------+                                 +---------------+
 | shared key  |                                 |shared root key|
 |(unencrypted)|-------------------------------> |  (encrypted)  |
 +-------------+     encrypts offline using      +---------------+
        ^            each server's root key          |            
        |                                            |            
        |                                            |            
        |  possesses    \o                           |            
        +--------------  |\                          |            
                        / \         shares with      |            
                      crypto    +--------------------+            
                      officer   |                                 
                                |                                 
                                |                                 
+----------------------+        |         +----------------------+
|       server-1       |        |         |       server-2       |
|    configuration     |        |         |    configuration     |
|                      |        |         |                      |
|                      |        |         |                      |
|  +----------------+  |        |         |  +----------------+  |
|  |   root key-1   |  |        |         |  |   root key-2   |  |
|  |    (hidden)    |  |        |         |  |    (hidden)    |  |
|  +----------------+  |        |         |  +----------------+  |
|      ^               |        |         |      ^               |
|      |               |        |         |      |               |
|      |               |        |         |      |               |
|      |  encrypted    |        |         |      |  encrypted    |
|      |  by           |        |         |      |  by           |
|      |               |        |         |      |               |
|      |               |        |         |      |               |
|  +----------------+  |        |         |  +---|------------+  |
|  |shared root key |  |        |         |  |shared root key |  |
|  |  (encrypted)   |  |        v         |  |  (encrypted)   |  |
|  +----------------+  |                  |  +----------------+  |
|      ^               |     regular      |      ^               |
|      |               |      admin       |      |               |
|      |               |                  |      |               |
|      |  encrypted    |       \o         |      |  encrypted    |
|      |  by           |        |\        |      |  by           |
|      |               |       / \        |      |               |
|      |               |                  |      |               |
|  +----------------+  |----------------->|  +----------------+  |
|  | all other keys |  |     migrate      |  | all other keys |  |
|  |  (encrypted)   |  |  configuration   |  |  (encrypted)   |  |
|  +----------------+  |                  |  +----------------+  |
|                      |                  |                      |
+----------------------+                  +----------------------+
]]></artwork>
          </figure>
        </t>
        </section>
      </section>

      <section title="Security Considerations">

        <t>The YANG module defined in this document is designed to be accessed via YANG
        based management protocols, such as NETCONF <xref target="RFC6241"/> and
        RESTCONF <xref target="RFC8040"/>.  Both of these protocols have mandatory-to-implement
        secure transport layers (e.g., SSH, TLS) with mutual authentication.</t>
 
        <t>The NETCONF access control model (NACM) <xref target="RFC8341"/> provides the means
        to restrict access for particular users to a pre-configured subset of all available
        protocol operations and content.</t>
 
        <t>There are a number of data nodes defined in this YANG module that are 
        writable/creatable/deletable (i.e., config true, which is the default). These data
        nodes may be considered sensitive or vulnerable in some network environments. Write
        operations (e.g., edit-config) to these data nodes without proper protection can
        have a negative effect on network operations. These are the subtrees and data nodes
        and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   /:">The entire data tree defined by this module is sensitive to
              write operations.  For instance, the addition or removal of keys, certificates,
              etc., can dramatically alter the implemented security policy.
              For this reason, the NACM extension "default-deny-write" has been set for the
              entire data tree.</t>
            <t hangText="   /keystore/asymmetric-keys/asymmetric-key/private-key:">When writing this node,
              implementations SHOULD ensure that the strength of the key being configured
              is not greater than the strength of the underlying secure transport 
              connection over which it is communicated.  Implementations SHOULD fail the 
              write-request if ever the strength of the private key is greater then
              the strength of the underlying transport, and alert the client that the
              strength of the key may have been compromised.  Additionally, when deleting
              this node, implementations SHOULD automatically (without explicit request)
              zeroize these keys in the most secure manner available, so as to prevent
              the remnants of their persisted storage locations from being analyzed in
              any meaningful way.</t>
          </list>
        </t>
 
        <t>Some of the readable data nodes in this YANG module may be considered sensitive
        or vulnerable in some network environments. It is thus important to control read 
        access (e.g., via get, get-config, or notification) to these data nodes. These are
        the subtrees and data nodes and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   /keystore/asymmetric-keys/asymmetric-key/private-key:">This node
              is additionally sensitive to read operations such that, in normal use cases,
              it should never be returned to a client.  The best reason for returning this
              node is to support backup/restore type workflows.  For this reason, the
              NACM extension "default-deny-all" has been set for this data node.</t>
          </list>
        </t>
      </section>

      <section title="IANA Considerations">
        <section title="The IETF XML Registry">
          <t>This document registers one URI in the "ns" subregistry of the
          IETF XML Registry <xref target="RFC3688"/>.  Following the format
          in <xref target="RFC3688"/>, the following registration is
          requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-keystore
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="The YANG Module Names Registry">
          <t>This document registers one YANG module in the
          YANG Module Names registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          the following registration is requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   name:         ietf-keystore
   namespace:    urn:ietf:params:xml:ns:yang:ietf-keystore
   prefix:       ks
   reference:    RFC CCCC

]]></artwork>
            </figure>
          </t>
        </section>
      </section>


    </middle>

    <back>

      <references title="Normative References">
        <?rfc include="reference.RFC.2119.xml"?>
        <?rfc include="reference.RFC.6020.xml"?>
        <?rfc include="reference.RFC.7950.xml"?>
        <?rfc include="reference.RFC.8341.xml"?>
        <?rfc include="reference.I-D.ietf-netconf-crypto-types"?>
      </references>

      <references title="Informative References">
        <?rfc include="reference.RFC.3688.xml"?>
        <?rfc include="reference.RFC.6241.xml"?>
        <?rfc include="reference.RFC.8040.xml"?>
        <?rfc include="reference.RFC.8174.xml"?>
        <?rfc include="reference.RFC.8340.xml"?>
        <?rfc include="reference.RFC.8342.xml"?>
        <reference anchor="Std-802.1AR-2009" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
            <front>
                <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</title>
                <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
                    <organization>IEEE SA-Standards Board</organization>
                </author>
                <date month="December" year="2009"/>
            </front>
        </reference>
      </references>

      <section title="Change Log">
        <section title="00 to 01">
          <t>
            <list style="symbols">
              <t>Replaced the 'certificate-chain' structures with PKCS#7 structures.
              (Issue #1)</t>
              <t>Added 'private-key' as a configurable data node, and removed the
              'generate-private-key' and 'load-private-key' actions.  (Issue #2)</t>
              <t>Moved 'user-auth-credentials' to the ietf-ssh-client module.
              (Issues #4 and #5)</t>
            </list>
          </t>
        </section>
        <section title="01 to 02">
          <t>
            <list style="symbols">
              <t>Added back 'generate-private-key' action.</t>
              <t>Removed 'RESTRICTED' enum from the 'private-key' leaf type.</t>
              <t>Fixed up a few description statements.</t>
            </list>
          </t>
        </section>
        <section title="02 to 03">
          <t>
            <list style="symbols">
              <t>Changed draft's title.</t>
              <t>Added missing references.</t>
              <t>Collapsed sections and levels.</t>
              <t>Added RFC 8174 to Requirements Language Section.</t>
              <t>Renamed 'trusted-certificates' to 'pinned-certificates'.</t>
              <t>Changed 'public-key' from config false to config true.</t>
              <t>Switched 'host-key' from OneAsymmetricKey to definition from RFC 4253.</t> 
            </list>
          </t>
        </section>
        <section title="03 to 04">
          <t>
            <list style="symbols">
              <t>Added typedefs around leafrefs to common keystore paths</t>
              <t>Now tree diagrams reference ietf-netmod-yang-tree-diagrams</t>
              <t>Removed Design Considerations section</t>
              <t>Moved key and certificate definitions from data tree to groupings</t>
            </list>
          </t>
        </section>
        <section title="04 to 05">
          <t>
            <list style="symbols">
              <t>Removed trust anchors (now in their own draft)</t>
              <t>Added back global keystore structure</t>
              <t>Added groupings enabling keys to either be locally defined or a reference to the keystore.</t>
            </list>
          </t>
        </section>
        <section title="05 to 06">
          <t>
            <list style="symbols">
              <t>Added feature "local-keys-supported"</t>
              <t>Added nacm:default-deny-all and nacm:default-deny-write</t>
              <t>Renamed generate-asymmetric-key to generate-hidden-key</t>
              <t>Added an install-hidden-key action</t>
              <t>Moved actions inside fo the "asymmetric-key" container</t>
              <t>Moved some groupings to draft-ietf-netconf-crypto-types</t>
            </list>
          </t>
        </section>
        <section title="06 to 07">
          <t>
            <list style="symbols">
              <t>Removed a "require-instance false"</t>
              <t>Clarified some description statements</t>
              <t>Improved the keystore-usage examples</t>
            </list>
          </t>
        </section>
        <section title="07 to 08">
          <t>
            <list style="symbols">
              <t>Added "local-definition" containers to avoid posibility of the
                action/notification statements being under a "case" statement.</t>
              <t>Updated copyright date, boilerplate template, affiliation,
                folding algorithm, and reformatted the YANG module.</t>
            </list>
          </t>
        </section>
        <section title="08 to 09">
          <t>
            <list style="symbols">
              <t>Added a 'description' statement to the 'must' in the
                /keystore/asymmetric-key node explaining that the descendent
                values may exist in &lt;operational&gt; only, and that
                implementation MUST assert that the values are either
                configured or that they exist in &lt;operational&gt;.</t>
              <t>Copied above 'must' statement (and description) into
                the local-or-keystore-asymmetric-key-grouping,
                local-or-keystore-asymmetric-key-with-certs-grouping,
                and local-or-keystore-end-entity-cert-with-key-grouping
                statements.</t>
            </list>
          </t>
        </section>
        <section title="09 to 10">
          <t>
            <list style="symbols">
              <t>Updated draft title to match new truststore draft title</t>
              <t>Moved everything under a top-level 'grouping' to enable use in other contexts.</t>
              <t>Renamed feature from 'local-keys-supported' to 'local-definitions-supported' (same name used in truststore)</t>
              <t>Removed the either-all-or-none 'must' expressions for the key's 3-tuple values (since the values are now 'mandatory true' in crypto-types)</t>
              <t>Example updated to reflect 'mandatory true' change in crypto-types draft</t>
            </list>
          </t>
        </section>
        <section title="10 to 11">
          <t>
            <list style="symbols">
              <t>Replaced typedef asymmetric-key-certificate-ref with grouping asymmetric-key-certificate-ref-grouping.</t>
              <t>Added feature feature 'key-generation'.</t>
              <t>Cloned groupings symmetric-key-grouping, asymmetric-key-pair-grouping,
                 asymmetric-key-pair-with-cert-grouping, and asymmetric-key-pair-with-certs-grouping
                 from crypto-keys, augmenting into each new case statements for values that
                 have been encrypted by other keys in the keystore.  Refactored keystore model
                 to use these groupings.</t>
              <t>Added new 'symmetric-keys' lists, as a sibling to the existing 'asymmetric-keys' list.</t>
              <t>Added RPCs (not actions) 'generate-symmetric-key' and 'generate-asymmetric-key' to
                 *return* a (potentially encrypted) key.</t>
            </list>
          </t>
        </section>
        <section title="11 to 12">
          <t>
            <list style="symbols">
              <t>Updated to reflect crypto-type's draft using enumerations over identities.</t>
              <t>Added examples for the 'generate-symmetric-key' and 'generate-asymmetric-key' RPCs.</t>
              <t>Updated the Introduction section.</t>
            </list>
          </t>
        </section>
        <section title="12 to 13">
          <t>
            <list style="symbols">
              <t>Updated examples to incorporate new "key-format" identities.</t>
              <t>Made the two "generate-*-key" RPCs be "action" statements instead.</t>
            </list>
          </t>
        </section>
        <section title="13 to 14">
          <t>
            <list style="symbols">
              <t>Updated YANG module and examples to incorporate the new iana-*-algorithm modules in the crypto-types draft..</t>
            </list>
          </t>
        </section>
        <section title="14 to 15">
          <t>
            <list style="symbols">
              <t>Added new "Support for Built-in Keys" section.</t>
              <t>Added 'must' expressions asserting that the 'key-format' leaf whenever an encrypted key is specified.</t>
              <t>Added local-or-keystore-symmetric-key-grouping for PSK support.</t>
            </list>
          </t>
        </section>
        <section title="15 to 16">
          <t>
            <list style="symbols">
              <t>Moved the generate key actions to ietf-crypt-types as RPCs, which are
                augmented by ietf-keystore to support encrypted keys.  Examples updated
                accordingly.</t>
              <t>Added a SSH certificate-based key (RFC 6187) and a raw private key to
                the example instance document (partly so they could be referenced by
                examples in the SSH and TLS client/server drafts.</t>
            </list>
          </t>
        </section>
        <section title="16 to 17">
          <t>
            <list style="symbols">
              <t>Removed augments to the "generate-symmetric-key" and "generate-asymmetric-key" groupings.</t>
              <t>Removed "generate-symmetric-key" and "generate-asymmetric-key" examples.</t>
              <t>Removed the "algorithm" nodes from remaining examples.</t>
              <t>Updated the "Support for Built-in Keys" section.</t>
              <t>Added new section "Encrypting Keys in Configuration".</t>
              <t>Added a "Note to Reviewers" note to first page.</t>
            </list>
          </t>
        </section>
        <section title="17 to 18">
          <t>
            <list style="symbols">
              <t>Removed dangling/unnecessary ref to RFC 8342.</t>
              <t>r/MUST/SHOULD/ wrt strength of keys being configured over transports.</t>
              <t>Added an example for the "certificate-expiration" notification.</t>
              <t>Clarified that OS MAY have a multiplicity of underlying keystores and/or HSMs.</t>
              <t>Clarified expected behavior for "built-in" keys in &lt;operational&gt;</t>
              <t>Clarified the "Migrating Configuration to Another Server" section.</t>
            </list>
          </t>
        </section>
      </section>

      <section title="Acknowledgements" numbered="no">
        <t>The authors would like to thank for following for
        lively discussions on list and in the halls (ordered
        by first name):
	      Alan Luchuk,
          Andy Bierman,
          Benoit Claise,
	      Bert Wijnen,
	      Balázs Kovács,
	      David Lamparter,
          Eric Voit,
	      Ladislav Lhotka,
	      Liang Xia,
	      Juergen Schoenwaelder,
          Mahesh Jethanandani,
          Martin Bjorklund,
          Mehmet Ersue,
          Phil Shafer,
	      Radek Krejci,
          Ramkumar Dhanapal,
          Reshad Rahman,
          Sean Turner,
          and Tom Petch.</t>
     </section>

    </back>
</rfc>

