<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc category="std"
     ipr="trust200902"
     docName="draft-ietf-netconf-keystore-latest" >
    <front>
        <title>Keystore Model</title>
        <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
            <organization>Juniper Networks</organization>
            <address>
                <email>kwatsen@juniper.net</email>
            </address>
        </author>
        <date/>
        <area>Operations</area>
        <workgroup>NETCONF Working Group</workgroup>
        <abstract>
            <t>This document defines a YANG data module for a system-level keystore
            mechanism, that might be used to hold onto private keys and certificates
            that are trusted by the system advertising support for this module.</t>
        </abstract>
        <note title="Editorial Note (To be removed by RFC Editor)">
          <t>This draft contains many placeholder values that need to be replaced
          with finalized values at the time of publication.  This note summarizes
          all of the substitutions that are needed.  No other RFC Editor 
          instructions are specified elsewhere in this document.</t>

          <t>Artwork in this document contains shorthand references to drafts in 
          progress.  Please apply the following replacements:
            <list  style="symbols">
              <t><spanx style="verb">VVVV</spanx> --&gt; the assigned RFC value for this draft</t>
            </list>
          </t>
          <t>Artwork in this document contains placeholder values for the date of publication of this
          draft.  Please apply the following replacement:
            <list  style="symbols">
              <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
            </list>
          </t>
          <t>The following Appendix section is to be removed prior to publication:
            <list  style="symbols">
              <t>Appendix A.  Change Log</t>
            </list>
          </t>
        </note>
    </front>
    <middle>
      <section title="Introduction">

        <t>This document defines a YANG <xref target="RFC6020"/> data module for
        a system-level keystore mechanism, which can be used to hold onto 
        private keys and certificates that are trusted by the system advertising
        support for this module.</t>

        <t>This module provides a centralized location for security sensitive
        data, so that the data can be then referenced by other modules.
        There are two types of data that are maintained by this module:
          <list style="symbols">
            <t>Private keys, and any associated public certificates.</t>
            <t>Sets of trusted certificates.</t>
          </list>
        </t>

        <t>This document extends special consideration for systems that have 
        Trusted Protection Modules (TPMs).  These systems are unique in
        that the TPM must be directed to generate new private keys (it is
        not possible to load a private key into a TPM) and it is not 
        possible to backup/restore the TPM's private keys as configuration.</t>

        <t>It is not required that a system has an operating system level
        keystore utility to implement this module.</t>


        <section title="Requirements Language">
          <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
          NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
          "MAY", and "OPTIONAL" in this document are to be interpreted as
          described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
          when, and only when, they appear in all capitals, as shown here.</t>
        </section>

        <section title="Tree Diagram Notation" anchor="tree-diagrams">
          <t>A simplified graphical representation of the data models
          is used in this document.  The meaning of the symbols in
          these diagrams is as follows:
            <list style="symbols">
              <t>Brackets "[" and "]" enclose list keys.</t>
              <t>Braces "{" and "}" enclose feature names, and indicate
              that the named feature must be present for the subtree
              to be present.</t>
              <t>Abbreviations before data node names: "rw" means
              configuration (read-write) and "ro" state data 
              (read-only).</t>
              <t>Symbols after data node names: "?" means an optional
              node, "!" means a presence container, and "*" denotes a
              list and leaf-list.</t>
              <t>Parentheses enclose choice and case nodes, and case
              nodes are also marked with a colon (":").</t>
              <t>Ellipsis ("...") stands for contents of subtrees that
              are not shown.</t>
            </list>
          </t>
        </section>
      </section>

      <section title="The Keystore Model" anchor="keystore-model">
        <t>The keystore module defined in this section provides a configurable
        object having the following characteristics:
          <list style="symbols">
            <t>A semi-configurable list of private keys, each with one or more associated
            certificates.  Private keys MUST be either preinstalled (e.g., a key associated
            to an IDevID <xref target="Std-802.1AR-2009"/> certificate),
            be generated by request, or be loaded by request.  Each private key is MAY have
            associated certificates, either preinstalled or configured after creation.</t>
            <t>A configurable list of lists of trust anchor certificates.  This enables 
            the server to have use-case specific trust anchors.  For instance, one list of 
            trust anchors might be used to authenticate management connections (e.g.,
            client certificate-based authentication for NETCONF or RESTCONF connections),
            and a different list of trust anchors might be used for when connecting to a
            specific Internet-based service (e.g., a zero touch bootstrap server).</t>
            <t>An RPC to generate a certificate signing request for an existing private
            key, a passed subject, and an optional attributes.  The signed certificate
            returned from an external certificate authority (CA) can be later set using
            a standard configuration change request (e.g., &lt;edit-config&gt;).</t>
            <t>An RPC to request the server to generate a new private key using the
            specified algorithm and key length.</t>
            <t>An RPC to request the server to load a new private key.</t>
          </list>
        </t>
        <section title="Overview">
          <t>The keystore module has the following tree diagram.  Please see <xref target="tree-diagrams"/> for information on how to interpret this diagram.
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-keystore-tree.txt)
]]></artwork>
            </figure>
          </t>
        </section>

        <section title="Example Usage">
          <t>The following example illustrates what a fully configured keystore object
          might look like.  The private-key shown below is consistent with the 
          generate-private-key and generate-certificate-signing-request examples above.
          This example also assumes that the resulting CA-signed certificate has been
          configured back onto the server.  Lastly, this example shows that three
          lists of trusted certificates having been configured.</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore.xml)
]]></artwork>
            </figure>
          </t>

          <t>The following example illustrates the "generate-certificate-signing-request"
          action in use with the NETCONF protocol.</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-rpc-gcsr-netconf.txt)
]]></artwork>
            </figure>
          </t>

          <t>The following example illustrates the "generate-private-key" action
          in use with the RESTCONF protocol and JSON encoding.</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-rpc-gpk-restconf-json.txt)
]]></artwork>
            </figure>
          </t>

          <t>The following example illustrates a "certificate-expiration"
          notification in XML.</t>
          <t>
            <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-ce-notification.txt)
]]></artwork>
            </figure>
          </t>

        </section>

        <section title="YANG Module" anchor="keystore-yang-module">
          <t>This YANG module makes extensive use of data types defined in
          <xref target="RFC5280"/> and <xref target="RFC5958"/>.</t>
          <t>
            <figure>
              <artwork><![CDATA[

<CODE BEGINS> file "ietf-keystore@YYYY-MM-DD.yang"

INSERT_TEXT_FROM_FILE(ietf-keystore@YYYY-MM-DD.yang)

<CODE ENDS>
]]></artwork>
            </figure>
          </t>
        </section>
      </section>

      <section title="Design Considerations">
        <t>This document uses PKCS #10 <xref target="RFC2986"/> for the
        "generate-certificate-signing-request" action.  The use of Certificate
        Request Message Format (CRMF) <xref target="RFC4211"/> was considered,
        but is was unclear if there was market demand for it, and so support
        for CRMF has been left out of this specification.  If it is desired 
        to support CRMF in the future, placing a "choice" statement in both
        the input and output statements, along with an "if-feature" statement
        on the CRMF option, would enable a backwards compatible solution.</t>

        <t>This document puts a limit of the number of elliptical curves
        supported by default.  This was done to match industry trends in IETF best
        practice (e.g., matching work being done in TLS 1.3).  If additional
        algorithms are needed, they MAY be augmented in by another module,
        or added directly in a future version of this document.</t>

        <t>For the trusted-certificates list, Trust Anchor Format <xref target="RFC5914"/>
        was evaluated and deemed inappropriate due to this document's need to also support
        pinning.  That is, pinning a client-certificate to support NETCONF over TLS
        client authentication.</t>
 
      </section>

      <section title="Security Considerations">

        <t>The YANG module defined in this document is designed to be accessed via YANG
        based management protocols, such as NETCONF <xref target="RFC6241"/> and
        RESTCONF <xref target="RFC8040"/>.  Both of these protocols have mandatory-to-implement
        secure transport layers (e.g., SSH, TLS) with mutual authentication.</t>
 
        <t>The NETCONF access control model (NACM) <xref target="RFC6536"/> provides the means
        to restrict access for particular users to a pre-configured subset of all available
        protocol operations and content.</t>
 
        <t>There are a number of data nodes defined in this YANG module that are 
        writable/creatable/deletable (i.e., config true, which is the default). These data
        nodes may be considered sensitive or vulnerable in some network environments. Write
        operations (e.g., edit-config) to these data nodes without proper protection can
        have a negative effect on network operations. These are the subtrees and data nodes
        and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   /:">The entire data tree defined by this module is sensitive to
              write operations.  For instance, the addition or removal of keys, certificates,
              trusted anchors, etc., can dramatically alter the implemented security policy.
              This being the case, the top-level node in this module is marked with the NACM
              value 'default-deny-write'.</t>
            <t hangText="   /keystore/keys/key/private-key:">When writing this node,
              implementations MUST ensure that the strength of the key being configured
              is not greater than the strength of the underlying secure transport 
              connection over which it is communicated.  Implementations SHOULD fail the 
              write-request if ever the strength of the private key is greater then
              the strength of the underlying transport, and alert the client that the
              strength of the key may have been compromised.  Additionally, when deleting
              this node, implementations SHOULD automatically (without explicit request)
              zeroize these keys in the most secure manner available, so as to prevent
              the remnants of their persisted storage locations from being analyzed in
              any meaningful way.</t>
          </list>
        </t>
 
        <t>Some of the readable data nodes in this YANG module may be considered sensitive
        or vulnerable in some network environments. It is thus important to control read 
        access (e.g., via get, get-config, or notification) to these data nodes. These are
        the subtrees and data nodes and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   /keystore/keys/key/private-key:">This node is additionally
              sensitive to read operations such that, in normal use cases, it should never
              be returned to a client.  The best reason for returning this node is to support
              backup/restore type workflows.  This being the case, this node is marked
              with the NACM value 'default-deny-all'.</t>
          </list>
        </t>
 
        <t>Some of the RPC operations in this YANG module may be considered sensitive or
        vulnerable in some network environments. It is thus important to control access
        to these operations. These are the operations and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   generate-certificate-signing-request:">For this RPC operation,
              it is RECOMMENDED that implementations assert channel binding <xref target="RFC5056"/>,
              so as to ensure that the application layer that sent the request is the same
              as the device authenticated when the secure transport layer was established.</t>
          </list>
        </t>

      </section>

      <section title="IANA Considerations">
        <section title="The IETF XML Registry">
          <t>This document registers one URI in the IETF XML 
          registry <xref target="RFC3688"/>.  Following the format in 
          <xref target="RFC3688"/>, the following registration is
          requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-keystore
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="The YANG Module Names Registry">
          <t>This document registers one YANG module in the
          YANG Module Names registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          the following registration is requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   name:         ietf-keystore
   namespace:    urn:ietf:params:xml:ns:yang:ietf-keystore
   prefix:       kc
   reference:    RFC VVVV

]]></artwork>
            </figure>
          </t>
        </section>
      </section>


      <section title="Acknowledgements">
        <t>The authors would like to thank for following for
        lively discussions on list and in the halls (ordered
        by last name): Andy Bierman, Martin Bjorklund, Benoit Claise,
        Mehmet Ersue, Balázs Kovács, David Lamparter, Alan Luchuk, Ladislav Lhotka,
        Radek Krejci, Tom Petch, Juergen Schoenwaelder; Phil Shafer, 
        Sean Turner, and Bert Wijnen.</t>
     </section>

    </middle>

    <back>
      <references title="Normative References">
        <?rfc include="reference.RFC.2119.xml"?>
        <?rfc include="reference.RFC.2986.xml"?>
        <?rfc include="reference.RFC.5280.xml"?>
        <?rfc include="reference.RFC.5958.xml"?>
        <?rfc include="reference.RFC.6020.xml"?>
        <?rfc include="reference.RFC.6536.xml"?>
      </references>
      <references title="Informative References">
        <?rfc include="reference.RFC.3688.xml"?>
        <?rfc include="reference.RFC.4211.xml"?>
        <?rfc include="reference.RFC.5056.xml"?>
        <?rfc include="reference.RFC.5914.xml"?>
        <?rfc include="reference.RFC.6241.xml"?>
        <?rfc include="reference.RFC.8040.xml"?>
        <?rfc include="reference.RFC.8174.xml"?>
        <reference anchor="Std-802.1AR-2009" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
            <front>
                <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</title>
                <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
                    <organization>IEEE SA-Standards Board</organization>
                </author>
                <date month="December" year="2009"/>
            </front>
        </reference>
      </references>

      <section title="Change Log">
        <section title="server-model-09 to 00">
          <t>
            <list style="symbols">
              <t>This draft was split out from draft-ietf-netconf-server-model-09.</t>
              <t>Removed key-usage parameter from generate-private-key action.</t>
              <t>Now /private-keys/private-key/certificates/certificate/name
              must be globally unique (unique across all private keys).</t>
              <t>Added top-level 'trusted-ssh-host-keys' and 'user-auth-credentials'
              to support SSH client modules.</t>
            </list>
          </t>
        </section>
        <section title="keychain-00 to keystore-00">
          <t>
            <list style="symbols">
              <t>Renamed module from "keychain" to "keystore" (Issue #3)</t>
            </list>
          </t>
        </section>
        <section title="00 to 01">
          <t>
            <list style="symbols">
              <t>Replaced the 'certificate-chain' structures with PKCS#7 structures.
              (Issue #1)</t>
              <t>Added 'private-key' as a configurable data node, and removed the
              'generate-private-key' and 'load-private-key' actions.  (Issue #2)</t>
              <t>Moved 'user-auth-credentials' to the ietf-ssh-client module.
              (Issues #4 and #5)</t>
            </list>
          </t>
        </section>
        <section title="01 to 02">
          <t>
            <list style="symbols">
              <t>Added back 'generate-private-key' action.</t>
              <t>Removed 'RESTRICTED' enum from the 'private-key' leaf type.</t>
              <t>Fixed up a few description statements.</t>
            </list>
          </t>
        </section>
        <section title="02 to 03">
          <t>
            <list style="symbols">
              <t>Added RFC 8174 to Requirements Language Section.</t>
            </list>
          </t>
        </section>
      </section>
    </back>
</rfc>

