<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc category="std"
     ipr="trust200902"
     docName="draft-ietf-netconf-keystore-latest" >
    <front>
        <title>YANG Data Model for a "Keystore" Mechanism</title>
        <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
            <organization>Juniper Networks</organization>
            <address>
                <email>kwatsen@juniper.net</email>
            </address>
        </author>
        <date/>
        <area>Operations</area>
        <workgroup>NETCONF Working Group</workgroup>
        <abstract>
            <t>This document defines a YANG module called a "keystore",
            containing pinned certificates and pinned SSH host-keys.
            The module also defines a grouping for configuring
            public key pairs and a grouping for configuring
            certificates.  The module also defines a notification
            that a system can use when one of its configured
            certificates is about to expire. </t>
        </abstract>
        <note title="Editorial Note (To be removed by RFC Editor)">
          <t>This draft contains many placeholder values that need to be replaced
          with finalized values at the time of publication.  This note summarizes
          all of the substitutions that are needed.  No other RFC Editor 
          instructions are specified elsewhere in this document.</t>

          <t>Artwork in this document contains shorthand references to drafts in 
          progress.  Please apply the following replacements:
            <list  style="symbols">
              <t><spanx style="verb">VVVV</spanx> --&gt; the assigned RFC value for this draft</t>
            </list>
          </t>
          <t>Artwork in this document contains placeholder values for the date of publication of this
          draft.  Please apply the following replacement:
            <list  style="symbols">
              <t><spanx style="verb">YYYY-MM-DD</spanx> --&gt; the publication date of this draft</t>
            </list>
          </t>
          <t>The following Appendix section is to be removed prior to publication:
            <list  style="symbols">
              <t>Appendix A.  Change Log</t>
            </list>
          </t>
        </note>
    </front>
    <middle>
      <section title="Introduction">

        <t>This document defines a YANG <xref target="RFC7950"/> module
        for a system-level mechanism, herein called a "keystore".  The
        keystore provides a centralized location for security sensitive
        data, as described below.</t>

        <t>This module has the following characteristics:
          <list style="symbols">
            <t>A 'grouping' for a public/private key pair, and an 'action' for requesting
            the system to generate a new private key.</t>

            <t>A 'grouping' for a list of certificates that might be associated with a
            public/private key pair, and an 'action' the requesting a system to generate
            a certificate signing request.</t>

            <t>An unordered list of pinned certificate sets, where each pinned certificate set
            contains an unordered list of pinned certificates.  This structure enables a server
            to use specific sets of pinned certificates on a case-by-case basis. For instance,
            one set of pinned certificates might be used by an HTTPS-client when connecting
            to particular HTTPS servers, while another set of pinned certificates might be
            used by a server when authenticating client connections (e.g., certificate-based
            client authentication).</t>

            <t>An unordered list of pinned SSH host key sets, where each pinned SSH host key
            set contains an unordered list of pinned SSH host keys.  This structure enables a server
            to use specific sets of pinned SSH host-keys on a case-by-case basis. For 
            instance, SSH clients can be configured to use different sets of pinned SSH host
            keys when connecting to different SSH servers.</t>

            <t>A notification to indicate when a certificate is about to expire.</t>
          </list>
        </t>

        <t>Special consideration has been given for systems that have 
        Trusted Protection Modules (TPMs).  These systems are unique in
        that the TPM must be directed to generate new keys (it is
        not possible to load a key into a TPM) and it is not 
        possible to backup/restore the TPM's private keys as configuration.</t>

        <t>It is not required that a system has an operating system level
        keystore utility to implement this module.</t>


        <section title="Requirements Language">
          <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
          NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED",
          "MAY", and "OPTIONAL" in this document are to be interpreted as
          described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
          when, and only when, they appear in all capitals, as shown here.</t>
        </section>
      </section>

<!--
      <section title="Design Considerations">
        <t>This document uses PKCS #10 <xref target="RFC2986"/> for the
        "generate-certificate-signing-request" action.  The use of Certificate
        Request Message Format (CRMF) <xref target="RFC4211"/> was considered,
        but is was unclear if there was market demand for it, and so support
        for CRMF has been left out of this specification.  If it is desired 
        to support CRMF in the future, placing a "choice" statement in both
        the input and output statements, along with an "if-feature" statement
        on the CRMF option, would enable a backwards compatible solution.</t>

        <t>In order to use YANG identities for algorithm identifiers, only
        the most commonly used RSA key lengths are supported for the RSA
        algorithm.  Additional key lengths can be defined in another module
        or added into a future version of this document.</t>
 
        <t>This document limits the number of elliptical curves supported.
        This was done to match industry trends and IETF best practice (e.g.,
        matching work being done in TLS 1.3).  If additional algorithms are
        needed, they can be defined by another module or added into a future
        version of this document.</t>

        <t>For the trusted-certificates list, Trust Anchor Format 
        <xref target="RFC5914"/> was evaluated and deemed inappropriate due
        to this document's need to also support pinning.  That is, pinning
        a client-certificate to support NETCONF over TLS client authentication.</t>
      </section>
-->

      <section title="Tree Diagram">
        <t>The following tree diagram <xref target="I-D.ietf-netmod-yang-tree-diagrams"/>
        provides an overview of the data model for the "ietf-keystore" module.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ietf-keystore-tree.txt)
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Example Usage">
        <t>The following example illustrates what a configured keystore 
        might look like.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore.xml)
]]></artwork>
          </figure>
        </t>

        <t>The following example illustrates the "certificate-expiration"
        notification in use with the NETCONF protocol.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-ce-notification.xml,68)
]]></artwork>
          </figure>
        </t>

        <t>The following example module has been constructed to illustrate
        the groupings defined in the "ietf-keystore" module.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(ex-keystore-usage.yang)
]]></artwork>
          </figure>
        </t>

        <t>The following example illustrates what a configured key 
        might look like.  This example uses the "ex-keystore-usage"
        module above.</t>
        <t>
          <figure>
            <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(refs/ex-keystore-usage.xml,69)
]]></artwork>
          </figure>
        </t>

        <t>The following example illustrates the "generate-certificate-signing-request"
        action in use with the NETCONF protocol.  This example uses the "ex-keystore-usage"
        module above.</t>
        <t>
          <figure>
            <artwork><![CDATA[
REQUEST
-------
INSERT_TEXT_FROM_FILE(refs/ex-keystore-gcsr-rpc.xml)

RESPONSE
--------
INSERT_TEXT_FROM_FILE(refs/ex-keystore-gcsr-rpc-reply.xml)
]]></artwork>
          </figure>
        </t>

        <t>The following example illustrates the "generate-private-key" action
        in use with the NETCONF protocol.  This example uses the "ex-keystore-usage"
        module above.</t>
        <t>
          <figure>
            <artwork><![CDATA[
REQUEST
-------
INSERT_TEXT_FROM_FILE(refs/ex-keystore-gpk-rpc.xml,68)

RESPONSE
--------
INSERT_TEXT_FROM_FILE(refs/ex-keystore-gpk-rpc-reply.xml)
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="YANG Module" anchor="keystore-yang-module">
        <t>This YANG module imports modules defined in <xref target="RFC6536"/>
        and <xref target="RFC6991"/>.  This module uses data types defined in
        <xref target="RFC2315"/>, <xref target="RFC2986"/>, <xref target="RFC3447"/>,
        <xref target="RFC4253"/>, <xref target="RFC5280"/>, <xref target="RFC5915"/>,
        and <xref target="ITU.X690.1994"/>.  This module uses algorithms defined in
        <xref target="RFC3447"/> and <xref target="RFC5480"/>.</t>
        <t>
          <figure>
            <artwork><![CDATA[
<CODE BEGINS> file "ietf-keystore@YYYY-MM-DD.yang"
INSERT_TEXT_FROM_FILE(ietf-keystore@YYYY-MM-DD.yang)
<CODE ENDS>
]]></artwork>
          </figure>
        </t>
      </section>

      <section title="Security Considerations">

        <t>The YANG module defined in this document is designed to be accessed via YANG
        based management protocols, such as NETCONF <xref target="RFC6241"/> and
        RESTCONF <xref target="RFC8040"/>.  Both of these protocols have mandatory-to-implement
        secure transport layers (e.g., SSH, TLS) with mutual authentication.</t>
 
        <t>The NETCONF access control model (NACM) <xref target="RFC6536"/> provides the means
        to restrict access for particular users to a pre-configured subset of all available
        protocol operations and content.</t>
 
        <t>There are a number of data nodes defined in this YANG module that are 
        writable/creatable/deletable (i.e., config true, which is the default). These data
        nodes may be considered sensitive or vulnerable in some network environments. Write
        operations (e.g., edit-config) to these data nodes without proper protection can
        have a negative effect on network operations. These are the subtrees and data nodes
        and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   /:">The entire data tree defined by this module is sensitive to
              write operations.  For instance, the addition or removal of keys, certificates,
              trusted anchors, etc., can dramatically alter the implemented security policy.
              This being the case, the top-level node in this module is marked with the NACM
              value 'default-deny-write'.</t>
            <t hangText="   /keystore/keys/key/private-key:">When writing this node,
              implementations MUST ensure that the strength of the key being configured
              is not greater than the strength of the underlying secure transport 
              connection over which it is communicated.  Implementations SHOULD fail the 
              write-request if ever the strength of the private key is greater then
              the strength of the underlying transport, and alert the client that the
              strength of the key may have been compromised.  Additionally, when deleting
              this node, implementations SHOULD automatically (without explicit request)
              zeroize these keys in the most secure manner available, so as to prevent
              the remnants of their persisted storage locations from being analyzed in
              any meaningful way.</t>
          </list>
        </t>
 
        <t>Some of the readable data nodes in this YANG module may be considered sensitive
        or vulnerable in some network environments. It is thus important to control read 
        access (e.g., via get, get-config, or notification) to these data nodes. These are
        the subtrees and data nodes and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   /keystore/keys/key/private-key:">This node is additionally
              sensitive to read operations such that, in normal use cases, it should never
              be returned to a client.  The best reason for returning this node is to support
              backup/restore type workflows.  This being the case, this node is marked
              with the NACM value 'default-deny-all'.</t>
          </list>
        </t>
 
        <t>Some of the operations in this YANG module may be considered sensitive or
        vulnerable in some network environments. It is thus important to control access
        to these operations. These are the operations and their sensitivity/vulnerability:
          <list style="hanging" hangIndent="6">
            <t hangText="   generate-certificate-signing-request:">For this action,
              it is RECOMMENDED that implementations assert channel binding <xref target="RFC5056"/>,
              so as to ensure that the application layer that sent the request is the same
              as the device authenticated when the secure transport layer was established.</t>
          </list>
        </t>

      </section>

      <section title="IANA Considerations">
        <section title="The IETF XML Registry">
          <t>This document registers one URI in the IETF XML 
          registry <xref target="RFC3688"/>.  Following the format in 
          <xref target="RFC3688"/>, the following registration is
          requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   URI: urn:ietf:params:xml:ns:yang:ietf-keystore
   Registrant Contact: The NETCONF WG of the IETF.
   XML: N/A, the requested URI is an XML namespace.
]]></artwork>
            </figure>
          </t>
        </section>
        <section title="The YANG Module Names Registry">
          <t>This document registers one YANG module in the
          YANG Module Names registry <xref target="RFC6020"/>.
          Following the format in <xref target="RFC6020"/>, the
          the following registration is requested:</t>
          <t>
            <figure>
                <artwork><![CDATA[
   name:         ietf-keystore
   namespace:    urn:ietf:params:xml:ns:yang:ietf-keystore
   prefix:       ks
   reference:    RFC VVVV

]]></artwork>
            </figure>
          </t>
        </section>
      </section>


      <section title="Acknowledgements">
        <t>The authors would like to thank for following for
        lively discussions on list and in the halls (ordered
        by last name): Andy Bierman, Martin Bjorklund, Benoit Claise,
        Mehmet Ersue, Balázs Kovács, David Lamparter, Alan Luchuk, Ladislav Lhotka,
        Radek Krejci, Tom Petch, Juergen Schoenwaelder; Phil Shafer, 
        Sean Turner, and Bert Wijnen.</t>
     </section>

    </middle>

    <back>
      <references title="Normative References">
        <?rfc include="reference.RFC.2119.xml"?>
        <?rfc include="reference.RFC.2315.xml"?>
        <?rfc include="reference.RFC.2986.xml"?>
        <?rfc include="reference.RFC.3447.xml"?>
        <?rfc include="reference.RFC.4253.xml"?>
        <?rfc include="reference.RFC.5280.xml"?>
        <?rfc include="reference.RFC.5480.xml"?>
        <?rfc include="reference.RFC.5915.xml"?>
        <?rfc include="reference.RFC.6020.xml"?>
        <?rfc include="reference.RFC.6536.xml"?>
        <?rfc include="reference.RFC.6991.xml"?>
        <?rfc include="reference.RFC.7950.xml"?>
        <?rfc include="_reference.ITU.X690.1994.xml"?>
      </references>
      <references title="Informative References">
        <?rfc include="reference.RFC.3688.xml"?>
        <?rfc include="reference.RFC.4211.xml"?>
        <?rfc include="reference.RFC.5056.xml"?>
        <?rfc include="reference.RFC.5914.xml"?>
        <?rfc include="reference.RFC.6241.xml"?>
        <?rfc include="reference.RFC.8040.xml"?>
        <?rfc include="reference.RFC.8174.xml"?>
        <?rfc include="reference.I-D.ietf-netmod-yang-tree-diagrams"?>
        <reference anchor="Std-802.1AR-2009" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
            <front>
                <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</title>
                <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
                    <organization>IEEE SA-Standards Board</organization>
                </author>
                <date month="December" year="2009"/>
            </front>
        </reference>
      </references>

      <section title="Change Log">
        <section title="00 to 01">
          <t>
            <list style="symbols">
              <t>Replaced the 'certificate-chain' structures with PKCS#7 structures.
              (Issue #1)</t>
              <t>Added 'private-key' as a configurable data node, and removed the
              'generate-private-key' and 'load-private-key' actions.  (Issue #2)</t>
              <t>Moved 'user-auth-credentials' to the ietf-ssh-client module.
              (Issues #4 and #5)</t>
            </list>
          </t>
        </section>
        <section title="01 to 02">
          <t>
            <list style="symbols">
              <t>Added back 'generate-private-key' action.</t>
              <t>Removed 'RESTRICTED' enum from the 'private-key' leaf type.</t>
              <t>Fixed up a few description statements.</t>
            </list>
          </t>
        </section>
        <section title="02 to 03">
          <t>
            <list style="symbols">
              <t>Changed draft's title.</t>
              <t>Added missing references.</t>
              <t>Collapsed sections and levels.</t>
              <t>Added RFC 8174 to Requirements Language Section.</t>
              <t>Renamed 'trusted-certificates' to 'pinned-certificates'.</t>
              <t>Changed 'public-key' from config false to config true.</t>
              <t>Switched 'host-key' from OneAsymmetricKey to definition from RFC 4253.</t> 
            </list>
          </t>
        </section>
        <section title="03 to 04">
          <t>
            <list style="symbols">
              <t>Added typedefs around leafrefs to common keystore paths</t>
              <t>Now tree diagrams reference ietf-netmod-yang-tree-diagrams</t>
              <t>Removed Design Considerations section</t>
              <t>Moved key and certificate definitions from data tree to groupings</t>
            </list>
          </t>
        </section>
      </section>
    </back>
</rfc>

